{"version":3,"file":"component---src-pages-data-tsx-7136bae018178921cb37.js","mappings":"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","sources":["webpack://sshihci.github.io/./src/components/Common/atoms/Button.tsx","webpack://sshihci.github.io/./src/components/Common/atoms/Link.tsx","webpack://sshihci.github.io/./src/components/Common/atoms/LinkStyle.ts","webpack://sshihci.github.io/./src/components/Common/organisms/File.tsx","webpack://sshihci.github.io/./src/components/DataSection/DataSectionBlock.tsx","webpack://sshihci.github.io/./src/components/DataSection/DataSectionNavigation.tsx","webpack://sshihci.github.io/./src/hooks/useIsSameSite.ts","webpack://sshihci.github.io/./src/lib/is-not-nullable.ts","webpack://sshihci.github.io/./src/pages/data.tsx","webpack://sshihci.github.io/./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import clsx from 'clsx'\nimport { forwardRef } from 'react'\nimport { LinkStyle } from './LinkStyle'\n\nexport type ButtonProps = JSX.IntrinsicElements['button'] & {\n  isActive?: boolean\n}\nexport const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      isActive,\n\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <button\n        className={clsx(\n          '',\n          LinkStyle,\n          isActive &&\n            `after:absolute after:right-4 after:leading-6 rounded-2xl before:!right-0 after:content-arrow-right-icon`,\n          className,\n        )}\n        ref={ref}\n        type=\"button\"\n        {...props}\n      />\n    )\n  },\n)\n","import clsx from 'clsx'\nimport { GatsbyLinkProps, Link as GatsbyLink } from 'gatsby'\nimport { useIsSameSite } from '~/hooks/useIsSameSite'\nimport { LinkStyle } from './LinkStyle'\n\nexport const Link = ({\n  className,\n  to,\n  ...props\n}: Omit<GatsbyLinkProps<Record<string, unknown>>, 'ref'>): JSX.Element => {\n  const isSameSite = useIsSameSite(to)\n\n  if (isSameSite) {\n    return (\n      <GatsbyLink\n        className={clsx('', LinkStyle, className)}\n        to={to}\n        {...props}\n      />\n    )\n  }\n  return (\n    <a\n      className={clsx('', LinkStyle, className)}\n      href={to}\n      rel=\"noopener noreferrer\"\n      target=\"_blank\"\n      {...props}\n    />\n  )\n}\n","import clsx from 'clsx'\n\nexport const LinkStyle = clsx(\n  'overflow-hidden relative py-1.5 px-6 text-sm text-center bg-gray-50 border min-w-[13rem] border-cyan-600 text-cyan-600',\n  'before:absolute before:w-full before:h-full before:bg-opacity-30 before:duration-200 before:bg-cyan-200',\n  'before:top-0 before:right-full hover:before:right-0',\n  'hover:rounded-2xl duration-500',\n)\n","import clsx from 'clsx'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport { useMemo } from 'react'\nimport { IconType } from 'react-icons'\nimport {\n  AiOutlineFile,\n  AiOutlineFileExcel,\n  AiOutlineFilePdf,\n} from 'react-icons/ai'\nimport { FileQuery } from '~graphql-types'\n\nconst fileIcon: Record<string, IconType> = {\n  pdf: AiOutlineFilePdf,\n  xlsx: AiOutlineFileExcel,\n  xlx: AiOutlineFileExcel,\n}\n\nexport type FileProps = {\n  name: string\n  display?: string\n  className?: string\n}\n\nexport const File = ({ name, className, display }: FileProps): JSX.Element => {\n  const { allFile } = useStaticQuery<FileQuery>(graphql`\n    query File {\n      allFile(filter: { sourceInstanceName: { eq: \"data\" } }) {\n        nodes {\n          id\n          extension\n          name\n          base\n          publicURL\n          relativePath\n        }\n      }\n    }\n  `)\n\n  const file = useMemo(() => {\n    return allFile.nodes.find(\n      (node) =>\n        node.relativePath === name || node.name === name || node.base === name,\n    )\n  }, [allFile.nodes, name])\n\n  const Icon = useMemo(() => {\n    if (!file) return AiOutlineFile\n    return fileIcon[file.extension] ?? AiOutlineFile\n  }, [file])\n\n  if (!file) {\n    return <div>ファイルが見つかりません</div>\n  }\n\n  return (\n    <div>\n      <a\n        className={clsx(\n          'flex flex-row flex-nowrap gap-2 items-center py-2 px-4',\n          'hover:underline hover:underline-offset-2',\n          className,\n        )}\n        download\n        href={file.publicURL}\n      >\n        <Icon\n          className={clsx(\n            'flex-shrink-0',\n            file.extension === 'pdf'\n              ? 'text-rose-500 border-rose-500'\n              : file.extension === 'xlsx' || file.extension === 'xlx'\n              ? 'text-emerald-500 border-emerald-500'\n              : 'border-gray-600',\n          )}\n          size={24}\n        />\n\n        <span className=\"text-lg\">{display ?? file.base}</span>\n      </a>\n    </div>\n  )\n}\n","import clsx from 'clsx'\nimport { forwardRef } from 'react'\nimport { DataSectionBlockFileFragment } from '~graphql-types'\nimport { File } from '../Common/organisms/File'\n\nconst graphql = String.raw\n\nexport const DataSectionBlockFragment = graphql`\n  fragment DataSectionBlockFile on ConfigYamlFiles {\n    name\n    date\n    pdf {\n      relativePath\n    }\n    excel {\n      relativePath\n    }\n  }\n`\n\ntype DataSectionBlockProps = JSX.IntrinsicElements['div'] & {\n  file: DataSectionBlockFileFragment\n}\n\nexport const DataSectionBlock = forwardRef<\n  HTMLDivElement,\n  DataSectionBlockProps\n>(({ className, file, ...props }, ref) => {\n  if (!file.name || !file.excel?.relativePath || !file.pdf?.relativePath) {\n    return null\n  }\n  return (\n    <div\n      className={clsx('flex flex-col gap-3', className)}\n      {...props}\n      ref={ref}\n    >\n      <p>{file.date}</p>\n\n      <p className=\"text-lg\">{file.name}</p>\n\n      <ul className=\"flex flex-col gap-3 p-4 bg-opacity-20 bg-cyan-200\">\n        <li>\n          <File display=\"データソースと公開URL\" name={file.pdf.relativePath} />\n        </li>\n\n        <li>\n          <File display=\"データ一覧\" name={file.excel.relativePath} />\n        </li>\n      </ul>\n    </div>\n  )\n})\n","import clsx from 'clsx'\nimport { forwardRef } from 'react'\nimport {\n  DataSectionNavigationAllConfigFragment,\n  DataSectionNavigationCurrentConfigFragment,\n} from '~graphql-types'\nimport { Button } from '../Common/atoms/Button'\nimport { Link } from '../Common/atoms/Link'\n\nconst graphql = String.raw\n\nexport const DataSectionNavigationFragment = graphql`\n  fragment DataSectionNavigationCurrentConfig on ConfigYaml {\n    year\n  }\n  fragment DataSectionNavigationAllConfig on ConfigYaml {\n    year\n    id\n  }\n`\n\ntype DataSectionNavigationProps = JSX.IntrinsicElements['ul'] & {\n  currentConfig: DataSectionNavigationCurrentConfigFragment | undefined\n  allConfig: DataSectionNavigationAllConfigFragment[] | undefined\n}\n\nexport const DataSectionNavigation = forwardRef<\n  HTMLUListElement,\n  DataSectionNavigationProps\n>(({ className, currentConfig, allConfig, ...props }, ref) => {\n  return (\n    <ul className={clsx('flex flex-col gap-1', className)} ref={ref} {...props}>\n      {allConfig?.map((node) => {\n        if (node.year === currentConfig?.year) {\n          return (\n            <li key={node.id}>\n              <Button className=\"block w-full text-cyan-800\" disabled isActive>\n                {`${node.year}年度`}\n              </Button>\n            </li>\n          )\n        }\n        return (\n          <li key={node.id}>\n            <Link className=\"block text-cyan-800\" to={`/data/${node.year}`}>\n              {`${node.year}年度`}\n            </Link>\n          </li>\n        )\n      })}\n    </ul>\n  )\n})\n","import { useLocation } from '@reach/router'\nimport { useMemo } from 'react'\nexport const useIsSameSite = (url: string): boolean => {\n  const location = useLocation()\n  const isSameSite = useMemo(() => {\n    if (url.startsWith('/') || url.startsWith('#') || url.startsWith('.'))\n      return true\n    try {\n      const toUrl = new URL(url)\n      const locationUrl = new URL(location.href)\n      return toUrl.origin === locationUrl.origin\n    } catch {\n      return false\n    }\n  }, [location.href, url])\n\n  return isSameSite\n}\n","export const isNotNullable = <T>(value: T): value is NonNullable<T> => {\n  return value !== null && typeof value !== 'undefined'\n}\n","import { graphql, PageProps } from 'gatsby'\nimport { Layout } from '~/components/Common/templates/Layout'\nimport { Seo } from '~/components/Common/templates/seo'\nimport { DataSectionBlock } from '~/components/DataSection/DataSectionBlock'\nimport { DataSectionNavigation } from '~/components/DataSection/DataSectionNavigation'\nimport Section from '~/components/Section'\nimport { isNotNullable } from '~/lib/is-not-nullable'\nimport { DataPageQuery } from '~graphql-types'\n\nexport const query = graphql`\n  fragment Data on ConfigYaml {\n    id\n    year\n    files {\n      name\n      date\n      pdf {\n        relativePath\n      }\n      excel {\n        relativePath\n      }\n    }\n  }\n  query DataPage {\n    allConfigYaml(sort: { fields: year, order: DESC }) {\n      nodes {\n        id\n        year\n      }\n    }\n    configYaml {\n      ...Data\n    }\n  }\n`\n\nconst DataPage = ({ data }: PageProps<DataPageQuery>): JSX.Element => {\n  return (\n    <Layout>\n      <Seo\n        canonical={`/data/${data.configYaml?.year}`}\n        title={`${data.configYaml?.year}年度の資料`}\n      />\n\n      <Section>\n        <Section.Title>{`${data.configYaml?.year}年度の資料`}</Section.Title>\n\n        <Section.Body>\n          <div className=\"flex flex-col md:flex-row gap-12\">\n            <div className=\"max-w-sm md:max-w-xs\">\n              <DataSectionNavigation\n                allConfig={data.allConfigYaml.nodes}\n                currentConfig={data.configYaml}\n              />\n            </div>\n\n            <div className=\"flex-1\">\n              <div className=\"flex flex-col gap-8 mb-4 max-w-lg\">\n                {data.configYaml?.files?.filter(isNotNullable).map((file) => (\n                  <DataSectionBlock file={file} key={file.name} />\n                ))}\n              </div>\n            </div>\n          </div>\n        </Section.Body>\n      </Section>\n    </Layout>\n  )\n}\n\nexport default DataPage\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}"],"names":["Button","forwardRef","ref","className","isActive","props","clsx","LinkStyle","type","Link","to","useIsSameSite","href","rel","target","fileIcon","pdf","AiOutlineFilePdf","xlsx","AiOutlineFileExcel","xlx","File","name","display","allFile","useStaticQuery","file","useMemo","nodes","find","node","relativePath","base","Icon","extension","AiOutlineFile","download","publicURL","size","DataSectionBlock","graphql","String","raw","excel","date","DataSectionNavigation","currentConfig","allConfig","map","year","disabled","id","url","location","useLocation","startsWith","toUrl","URL","locationUrl","origin","isNotNullable","value","data","canonical","configYaml","title","allConfigYaml","files","filter","_taggedTemplateLiteralLoose","strings","slice"],"sourceRoot":""}